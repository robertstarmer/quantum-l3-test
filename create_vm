#!/bin/bash
#
# assumes that openstack credentails are set in this file
source ~/openrc
source .network >& /dev/null


function sleep_count  () {
# pass in a time (usually in seconds) and a message ( in "")
echo -n $2
  count=1
  while [ $count -le $1 ]
  do
    echo -n '. '
    sleep 1
    (( count ++ ))
  done
}
COMPUTE_HOST=`nova-manage host list | grep com | head -1 | awk -F' ' '{print $1}'`
if [ -z ${COMPUTE_HOST} ] ; then
 die "There don't seem to be any 'compute' hosts available, perhaps run puppet agent on them again?"
fi
   
# initialize a network in quantum for use by VMs and assign it a non-routed subnet
NET_ID=`quantum net-list | grep private | awk -F' ' '{ print $2 }'`

if [ -z ${NET_ID} ] ; then
  ./net_setup
  NET_ID=`quantum net-list | grep private | awk -F' ' '{ print $2 }'`
fi

IMAGE_ID=`glance index | grep 'test' | head -1 |  awk -F' ' '{print $1}'`
if [ -z ${IMAGE_ID} ]; then
  [ -z ${IMAGE_LOC} ] && IMAGE_LOC='http://cloud-images.ubuntu.com/precise/current/precise-server-cloudimg-amd64-disk1.img'
  # IMAGE_LOC='http://128.107.252.163/precise.img'
  read -p "Where would you like to download a QCOW format test image from [${IMAGE_LOC}]: " IMAGE_LOC_IN
  [ -z ${IMAGE_LOC_IN} ] && IMAGE_LOC_IN="${IMAGE_LOC}"
  if [ grep IMAGE_LOC .network ] ; then
   sed -e "s/IMAGE_LOC.*/IMAGE_LOC=${IMAGE_LOC_IN}/" .network
  else
   echo "export IMAGE_LOC=${IMAGE_LOC_IN}" >> .network
  fi
  wget -O /tmp/test.img ${IMAGE_LOC_IN} 
  # import that image into glance
  glance image-create --name="test" --is-public=true --container-format=ovf --disk-format=qcow2 < /tmp/test.img
  # Caputre the Image ID so taht we can call the right UUID for this image
  IMAGE_ID=`glance index | grep 'test' | head -1 |  awk -F' ' '{print $1}'`
fi

# create a pub/priv keypair in the root directory. If not running as root, you will need to change this path. If keys in the .ssh path exist, you will be prompted to overwrite. Select "y" to overwrite or you will get a "permission denied error".
ssh-keygen -f /root/.ssh/id_rsa -t rsa -N ''
  
#add the public key to nova.
nova keypair-add --pub_key /root/.ssh/id_rsa.pub key_test

# create a security group so that we can allow ssh, http, and ping traffic
# when we add a floating IP (assuming you are adding floating IPs)
SEC_GROUP=`nova secgroup-list | grep sec_test`
if [ -z "${SEC_GROUP}" ] ; then
nova secgroup-create sec_test 'Test security group'
nova secgroup-add-rule sec_test tcp 22 22 0.0.0.0/0
nova secgroup-add-rule sec_test tcp 80 80 0.0.0.0/0
nova secgroup-add-rule sec_test icmp -1 -1 0.0.0.0/0
fi

instance_name='test_vm'
# Boot the added image against the "1" flavor which by default maps to a micro instance.   Include the percise_test group so our address will work when we add it later 
NOVA_EXIST=`nova list | grep ${instance_name}`
if ! [ "${NOVA_EXIST}" ] ; then
  BUILD_STAT=`nova boot --flavor 1 --security_groups sec_test --nic net-id=${NET_ID} --image ${IMAGE_ID} --key_name key_test $instance_name | grep status | awk -F' ' '{print $4}'`
else
 exit 1
fi

echo "Waiting for VM to boot"
while [ "${BUILD_STAT}" != "ACTIVE" ]; do
 BUILD_STAT=`nova show test_vm | grep status | awk -F' ' '{print $4}'`
 sleep_count 5 " . "
 if [ "${BUILD_STAT}" == 'ACTIVE' ]; then
   break
 elif [ "${BUILD_STAT}" == 'ERROR' ]; then
   die "The vm failed to build." 
 fi
done

# Show the state of the system we just requested.
PRIV_IP=`nova show $instance_name | grep 'private network' | awk -F' ' '{print $5}'`
echo -e "\nPRIVATE IP: ${PRIV_IP}"

PUB_NET_ID=`quantum net-list | grep ' public ' | awk -F' ' '{print $2}'`
PRIV_ROUTER=`quantum router-list | grep private_router_1 | awk -F' ' '{print $2}'`
echo "PUB_NET: ${PUB_NET_ID}, ROUTER: ${PRIV_ROUTER}"

# Now, for a floating IP
VM_PORT_ID=`quantum port-list | grep "${PRIV_IP}" | awk -F' ' '{print $2}'`
FLOAT_ID=`quantum floatingip-create ${PUB_NET_ID} | grep ' id ' | awk -F' ' '{print $4}'`

FLOAT_IP=`quantum floatingip-list | grep ${FLOAT_ID} | awk -F' ' '{print $5}'`
#if [ ${FLOAT_IP} == '|' ] ; then
#  sleep_count 20 "Waiting for the IP to be associated and quantum to catch up..."
#  FLOAT_IP=`quantum floatingip-list | grep ${FLOAT_ID} | awk -F' ' '{print $6}'`
#fi
echo "Floating IP: ${FLOAT_IP}"
quantum floatingip-associate ${FLOAT_ID} ${VM_PORT_ID}
# Let's see if we can hit our node
ip netns exec qrouter-${PRIV_ROUTER} ip addr list
echo -e "\n\npinging inside host: ip netns exec qrouter-${PRIV_ROUTER} ping -c 1 ${FLOAT_IP}\n\n"
RETRY=0
while [ "${RETRY}" -le "5" ] ; do
(( RETRY ++ ))
sleep_count 5 "Waiting for the IP to be associated and quantum to catch up..."
if ip netns exec qrouter-${PRIV_ROUTER} ping -c 1 ${FLOAT_IP} ;then
 echo -e "\n\nSuccess!\n\n"
 exit 0
fi
done
